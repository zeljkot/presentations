/**
 * NOTE: This class is auto generated by the swagger code generator program (2.2.3).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.annotations.*;
import io.swagger.model.Person;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import javax.validation.Valid;
import java.math.BigDecimal;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2017-08-29T20:02:44.702Z")

@Api(value = "persons", description = "the persons API")
public interface PersonsApi {

    @ApiOperation(value = "Get persons", notes = "Gets `Person` objects. Optional query param of **size** determines size of returned array ", response = Person.class, responseContainer = "List", tags={  })
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "Successful response", response = Person.class, responseContainer = "List") })

    @RequestMapping(value = "/persons",
        method = RequestMethod.GET)
    ResponseEntity<Iterable<Person>> personsGet(@ApiParam(value = "Size of array", defaultValue = "20") @RequestParam(value = "size", required = false, defaultValue="20") BigDecimal size);


    @ApiOperation(value = "Deletes the person", notes = "Person is *permanently* deleted", response = Void.class, tags={  })
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "OK", response = Void.class),
            @ApiResponse(code = 404, message = "Person not found", response = Void.class)})

    @RequestMapping(value = "/persons/{id}",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> personsIdDelete(@ApiParam(value = "",required=true ) @PathVariable("id") Integer id);


    @ApiOperation(value = "Retrieves person by ID", notes = "", response = Person.class, tags={  })
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "OK", response = Person.class),
        @ApiResponse(code = 404, message = "Not found", response = Void.class) })

    @RequestMapping(value = "/persons/{id}",
        method = RequestMethod.GET)
    ResponseEntity<Person> personsIdGet(@ApiParam(value = "",required=true ) @PathVariable("id") Integer id);


    @ApiOperation(value = "Updates user", notes = "", response = Integer.class, tags={  })
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "OK", response = Integer.class) })

    @RequestMapping(value = "/persons/{id}",
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<Integer> personsIdPut(@ApiParam(value = "",required=true ) @PathVariable("id") Integer id,@ApiParam(value = ""  )  @Valid @RequestBody Person person);


    @ApiOperation(value = "Adds new user", notes = "", response = Integer.class, tags={  })
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "User saved. Returns user ID.", response = Integer.class),
        @ApiResponse(code = 400, message = "User error.", response = Void.class) })

    @RequestMapping(value = "/persons",
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Integer> personsPost(@ApiParam(value = ""  )  @Valid @RequestBody Person person);

}
